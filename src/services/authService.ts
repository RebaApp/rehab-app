import { auth } from '../config/firebaseInit';
import { User } from '../types';
import { 
  signInWithEmailAndPassword, 
  createUserWithEmailAndPassword, 
  signOut as firebaseSignOut,
  sendPasswordResetEmail,
  onAuthStateChanged as firebaseOnAuthStateChanged,
  User as FirebaseUser
} from 'firebase/auth';
import * as AuthSession from 'expo-auth-session';
import * as WebBrowser from 'expo-web-browser';
import { Linking } from 'react-native';

export interface AuthError {
  code: string;
  message: string;
}

export interface AuthResult {
  success: boolean;
  user?: User;
  error?: AuthError;
}

class AuthService {
  // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ Client ID –∏ Secret –∏–∑ –Ø–Ω–¥–µ–∫—Å.OAuth
  private yandexClientId = 'b08282bbc8e8435d88e7c02b2098496f';
  private yandexClientSecret = 'ba5c7710a1fa4cd58ecccbacc514c890';

  constructor() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebBrowser –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    WebBrowser.maybeCompleteAuthSession();
  }

  // –Ø–Ω–¥–µ–∫—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ WebBrowser (–±–µ–∑ PKCE)
  async signInWithYandex(): Promise<AuthResult> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ø–Ω–¥–µ–∫—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ WebBrowser...');
      
      // –°–æ–∑–¥–∞–µ–º redirect URI –¥–ª—è –Ø–Ω–¥–µ–∫—Å OAuth
      const redirectUri = 'reba://auth';
      
      console.log('üì± Redirect URI:', redirectUri);
      
      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ PKCE
      const authUrl = `https://oauth.yandex.ru/authorize?response_type=code&client_id=${this.yandexClientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=login:email+login:info`;
      
      console.log('üåê URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authUrl);
      console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –Ø–Ω–¥–µ–∫—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const result = await WebBrowser.openAuthSessionAsync(authUrl, redirectUri);
      
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –Ø–Ω–¥–µ–∫—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result);
      
      if (result.type === 'success' && result.url) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ URL
        const url = new URL(result.url);
        const code = url.searchParams.get('code');
        
        if (!code) {
          throw new Error('–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL');
        }
        
        console.log('üîë –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', code);
        
        // –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ fetch
        const tokenParams = new URLSearchParams();
        tokenParams.append('grant_type', 'authorization_code');
        tokenParams.append('code', code);
        tokenParams.append('client_id', this.yandexClientId);
        tokenParams.append('client_secret', this.yandexClientSecret);
        tokenParams.append('redirect_uri', redirectUri);

        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
        console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', tokenParams.toString());

        const tokenResponse = await fetch('https://oauth.yandex.ru/token', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
          },
          body: tokenParams.toString(),
        });

        if (!tokenResponse.ok) {
          const errorText = await tokenResponse.text();
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', errorText);
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${tokenResponse.status}`);
        }

        const tokenData = await tokenResponse.json();
        
        console.log('üé´ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞:', tokenData.access_token);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userInfoResponse = await fetch(
          `https://login.yandex.ru/info?format=json`,
          {
            headers: {
              'Authorization': `OAuth ${tokenData.access_token}`,
            },
          }
        );
        
        if (!userInfoResponse.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userInfoResponse.status}`);
        }
        
        const userInfo = await userInfoResponse.json();
        
        console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞:', userInfo);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const appUser: User = {
          id: userInfo.id,
          email: userInfo.default_email || userInfo.emails?.[0] || '',
          name: userInfo.display_name || userInfo.real_name || userInfo.login || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          userType: 'USER',
          photo: userInfo.default_avatar_id ? `https://avatars.yandex.net/get-yapic/${userInfo.default_avatar_id}/islands-200` : '',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        };

        return {
          success: true,
          user: appUser,
        };
      } else if (result.type === 'cancel') {
        console.log('‚ùå –Ø–Ω–¥–µ–∫—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return {
          success: false,
          error: {
            code: 'CANCELLED',
            message: '–í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
          },
        };
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result);
        return {
          success: false,
          error: {
            code: 'AUTH_ERROR',
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          },
        };
      }
    } catch (error: any) {
      console.log('üí• –û—à–∏–±–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      
      return {
        success: false,
        error: {
          code: error.code || 'UNKNOWN',
          message: this.getYandexErrorMessage(error.code),
        },
      };
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
  async registerWithEmail(email: string, password: string, userData: Partial<User>): Promise<AuthResult> {
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      
      // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const appUser: User = {
        id: userCredential.user.uid,
        email: userCredential.user.email || email,
        name: userData.name || userCredential.user.displayName || email.split('@')[0],
        userType: userData.userType || 'USER',
        phone: userData.phone || '',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      return {
        success: true,
        user: appUser,
      };
    } catch (error: any) {
      return {
        success: false,
        error: {
          code: error.code,
          message: this.getErrorMessage(error.code),
        },
      };
    }
  }

  // –í—Ö–æ–¥ —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
  async signInWithEmail(email: string, password: string): Promise<AuthResult> {
    try {
      console.log('üìß –ù–∞—á–∏–Ω–∞–µ–º Email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:', email);
      
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      
      console.log('‚úÖ Email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', userCredential.user.email);
      
      const appUser: User = {
        id: userCredential.user.uid,
        email: userCredential.user.email || email,
        name: userCredential.user.displayName || email.split('@')[0],
        userType: 'USER', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É
        createdAt: userCredential.user.metadata.creationTime || new Date().toISOString(),
        updatedAt: userCredential.user.metadata.lastSignInTime || new Date().toISOString(),
      };

      return {
        success: true,
        user: appUser,
      };
    } catch (error: any) {
      console.log('üí• –û—à–∏–±–∫–∞ –≤ Email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: {
          code: error.code,
          message: this.getErrorMessage(error.code),
        },
      };
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async signOut(): Promise<void> {
    try {
      await firebaseSignOut(auth);
    } catch (error) {
      console.error('Sign out error:', error);
    }
  }

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  async resetPassword(email: string): Promise<AuthResult> {
    try {
      await sendPasswordResetEmail(auth, email);
      return {
        success: true,
      };
    } catch (error: any) {
      return {
        success: false,
        error: {
          code: error.code,
          message: this.getErrorMessage(error.code),
        },
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser(): User | null {
    const firebaseUser = auth.currentUser;
    if (!firebaseUser) return null;

    return {
      id: firebaseUser.uid,
      email: firebaseUser.email || '',
      name: firebaseUser.displayName || firebaseUser.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      userType: 'USER',
      createdAt: firebaseUser.metadata.creationTime || new Date().toISOString(),
      updatedAt: firebaseUser.metadata.lastSignInTime || new Date().toISOString(),
    };
  }

  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  onAuthStateChanged(callback: (user: User | null) => void) {
    return firebaseOnAuthStateChanged(auth, (firebaseUser: FirebaseUser | null) => {
      if (firebaseUser) {
        const appUser: User = {
          id: firebaseUser.uid,
          email: firebaseUser.email || '',
          name: firebaseUser.displayName || firebaseUser.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          userType: 'USER',
          createdAt: firebaseUser.metadata.creationTime || new Date().toISOString(),
          updatedAt: firebaseUser.metadata.lastSignInTime || new Date().toISOString(),
        };
        callback(appUser);
      } else {
        callback(null);
      }
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  getYandexClientId(): string {
    return this.yandexClientId;
  }

  hasYandexClientSecret(): boolean {
    return !!this.yandexClientSecret;
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ –Ø–Ω–¥–µ–∫—Å–∞ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  private getYandexErrorMessage(errorCode: string): string {
    switch (errorCode) {
      case 'access_denied':
        return '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';
      case 'invalid_request':
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      case 'invalid_client':
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';
      case 'invalid_grant':
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      case 'unauthorized_client':
        return '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ';
      case 'unsupported_grant_type':
        return '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      case 'invalid_scope':
        return '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞';
      case 'network_error':
        return '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
      default:
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å';
    }
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ Firebase –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  private getErrorMessage(errorCode: string): string {
    switch (errorCode) {
      case 'auth/email-already-in-use':
        return '–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
      case 'auth/invalid-email':
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
      case 'auth/operation-not-allowed':
        return '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞';
      case 'auth/weak-password':
        return '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π';
      case 'auth/user-disabled':
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
      case 'auth/user-not-found':
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å';
      case 'auth/wrong-password':
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
      case 'auth/invalid-credential':
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å';
      case 'auth/too-many-requests':
        return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      case 'auth/network-request-failed':
        return '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
      default:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
    }
  }
}

export default new AuthService();